struct Node {
    int data;
    Node* left;
    Node* right;

   
};
void del(Node* root);
void print(Node* root, int level);
Node* createNode(int value);
Node* insert(Node* root, int value);



#include "Header.h"
#include<iostream>
using namespace std;
Node* createNode(int value)
{
    Node* newNode = new Node();
    if (newNode == nullptr) {
        return nullptr;
    }
    newNode->data = value;
    newNode->left = nullptr;
    newNode->right = nullptr;
    return newNode;
}

Node* insert(Node* root, int value)
{
    if (root == nullptr) {
        root = createNode(value);
        return root;
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    }
    if (value >= root->data) {
        root->right = insert(root->right, value);
    }
    return root;
}
void del(Node* root) {
    if (root == nullptr) {
        return;
    }


    if (root->left != nullptr && root->right != nullptr) {
        del(root->left);
        del(root->right);
    }
    else if (root->left != nullptr) {
        del(root->left);
        root->left = nullptr;
    }
    else if (root->right != nullptr) {
        del(root->right);
        root->right = nullptr;
    }
}
void print(Node* root, int level)
{

    if (root) {
        print(root->left, level + 1);
        for (int i = 0; i < level; i++) {
            cout << "\t";
        }

        cout << root->data << endl;
        print(root->right, level + 1);
    }
}



#include <iostream>
#include "Header.h"
using namespace std;

int main() {
    setlocale(LC_ALL, "rus");
    Node* root = nullptr;
    int n=0;
    while (n != 33) {
        cin >> n;
        if (n != 33) {
            root = insert(root, n);
        }
    }

    std::cout << "Дерево до удаления лишних ветвей:" << std::endl;
    print(root,0);

    del(root);

    std::cout << "\n\nДерево после удаления лишних ветвей (строго бинарное):" << std::endl;
    print(root,0);

    return 0;
}

